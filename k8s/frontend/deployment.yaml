# Frontend - Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: frontend
  labels:
    name: frontend
    environment: production
---
# Frontend - ConfigMap para Nginx
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: frontend
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Configuración de logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Frontend - SPA routing
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Proxy para API backend
        location /api {
            proxy_pass http://backend-service.backend.svc.cluster.local;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 120s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
---
# Frontend - Deployment
# Principio: "Ganado no Mascotas" (Cap 2)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend
  labels:
    app: frontend
    tier: web
    version: v1
spec:
  replicas: 1  # Mínimo 1 réplica, HPA ajustará según carga
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Cero downtime
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: web
        version: v1
    spec:
      # Node Affinity - Solo en nodos del pool frontend
      # Principio: "Minimizar variación" (Cap 2)
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: workload
                operator: In
                values:
                - frontend
        # Anti-affinity para distribuir pods
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: frontend
              topologyKey: kubernetes.io/hostname
      containers:
      - name: frontend
        image: DOCKER_IMAGE_PLACEHOLDER  # Se reemplazará con imagen real
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 2
        # Resource limits para HPA
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
# Frontend - Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: frontend
  labels:
    app: frontend
spec:
  type: LoadBalancer  # LoadBalancer público para acceso desde internet
  selector:
    app: frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  sessionAffinity: None
---
# Frontend - HorizontalPodAutoscaler
# Autoscaling más conservador para frontend (menos carga esperada)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60  # Escala cuando CPU > 60%
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70  # Escala cuando RAM > 70%
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Espera 5 min antes de reducir
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30  # Espera 30s antes de escalar (más conservador)
      policies:
      - type: Percent
        value: 50  # Incrementa 50% pods
        periodSeconds: 30
      - type: Pods
        value: 1  # O agrega 1 pod a la vez
        periodSeconds: 30
      selectPolicy: Max

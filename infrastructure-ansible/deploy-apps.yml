---
# Playbook para desplegar aplicaciones en Azure Container Apps (Free Consumption tier)

- name: Deploy Applications to Azure Container Apps
  hosts: localhost
  gather_facts: true
  collections:
    - azure.azcollection
  
  tasks:
    - name: Validate subscription id is available
      fail:
        msg: "AZURE_SUBSCRIPTION_ID environment variable is required to deploy Container Apps."
      when: azure_subscription_id is undefined or azure_subscription_id | length == 0

    - name: Display deployment information
      debug:
        msg:
          - "Deploying applications to Azure Container Apps"
          - "Environment: {{ container_apps_environment_name }}"
          - "Log Analytics Workspace: {{ log_analytics_workspace_name }}"

    - name: Check if Resource Group exists
      azure_rm_resourcegroup_info:
        name: "{{ resource_group_name }}"
      register: rg_info

    - name: Fail if Resource Group doesn't exist
      fail:
        msg: "Resource Group {{ resource_group_name }} does not exist. Run deploy-infrastructure.yml first."
      when: rg_info.resourcegroups | length == 0

    - name: Get MySQL Server information
      azure_rm_resource_info:
        resource_group: "{{ resource_group_name }}"
        provider: DBforMySQL
        resource_type: flexibleServers
        resource_name: "{{ mysql_server_name }}"
        api_version: "2021-12-01-preview"
      register: mysql_info
      ignore_errors: true

    - name: Set MySQL connection information
      set_fact:
        mysql_fqdn: "{{ mysql_server_name }}.mysql.database.azure.com"
      when: mysql_info.response is defined and mysql_info.response | length > 0

    - name: Ensure Log Analytics workspace (required for Container Apps)
      azure_rm_loganalyticsworkspace:
        resource_group: "{{ resource_group_name }}"
        name: "{{ log_analytics_workspace_name }}"
        location: "{{ location }}"
        sku: PerGB2018
        retention_in_days: 30
        tags: "{{ common_tags }}"
      register: log_analytics

    - name: Get Log Analytics workspace info
      azure_rm_loganalyticsworkspace_info:
        resource_group: "{{ resource_group_name }}"
        name: "{{ log_analytics_workspace_name }}"
      register: log_analytics_info

    - name: Set Log Analytics customer id
      set_fact:
        log_analytics_customer_id: "{{ log_analytics_info.workspaces[0].properties.customerId }}"

    - name: Get Log Analytics shared key
      azure_rm_resource:
        resource_group: "{{ resource_group_name }}"
        provider: OperationalInsights
        resource_type: workspaces
        resource_name: "{{ log_analytics_workspace_name }}"
        api_version: "2020-08-01"
        subresource:
          - type: sharedKeys
        method: POST
        body: {}
      register: log_analytics_keys

    - name: Create Container Apps environment (Consumption)
      azure_rm_resource:
        resource_group: "{{ resource_group_name }}"
        provider: Microsoft.App
        resource_type: managedEnvironments
        resource_name: "{{ container_apps_environment_name }}"
        api_version: "2023-05-01"
        state: present
        body:
          location: "{{ location }}"
          tags: "{{ common_tags }}"
          properties:
            appLogsConfiguration:
              destination: log-analytics
              logAnalyticsConfiguration:
                customerId: "{{ log_analytics_customer_id }}"
                sharedKey: "{{ log_analytics_keys.response.primarySharedKey }}"
            zoneRedundant: false
      register: container_environment

    - name: Deploy backend container app (autoscaling HTTP)
      azure_rm_resource:
        resource_group: "{{ resource_group_name }}"
        provider: Microsoft.App
        resource_type: containerApps
        resource_name: "{{ backend_container_app_name }}"
        api_version: "2023-05-01"
        state: present
        body:
          location: "{{ location }}"
          tags: "{{ common_tags }}"
          properties:
            managedEnvironmentId: "{{ container_environment.response.id }}"
            configuration:
              ingress:
                external: true
                targetPort: 5000
                transport: auto
              secrets: []
            template:
              containers:
                - name: backend
                  image: "{{ backend_docker_image }}"
                  resources:
                    cpu: "{{ backend_container_cpu | float }}"
                    memory: "{{ backend_container_memory }}"
                  env:
                    - name: MYSQL_HOST
                      value: "{{ mysql_fqdn | default('') }}"
                    - name: MYSQL_USER
                      value: "{{ mysql_admin_username }}"
                    - name: MYSQL_PASSWORD
                      value: "{{ mysql_admin_password }}"
                    - name: MYSQL_DATABASE
                      value: "{{ mysql_database_name }}"
                    - name: MYSQL_PORT
                      value: "3306"
                    - name: FLASK_ENV
                      value: "production"
              scale:
                minReplicas: "{{ backend_min_replicas | int }}"
                maxReplicas: "{{ backend_max_replicas | int }}"
                rules:
                  - name: http-scale
                    http:
                      metadata:
                        concurrentRequests: "50"
      register: backend_app

    - name: Deploy frontend container app
      azure_rm_resource:
        resource_group: "{{ resource_group_name }}"
        provider: Microsoft.App
        resource_type: containerApps
        resource_name: "{{ frontend_container_app_name }}"
        api_version: "2023-05-01"
        state: present
        body:
          location: "{{ location }}"
          tags: "{{ common_tags }}"
          properties:
            managedEnvironmentId: "{{ container_environment.response.id }}"
            configuration:
              ingress:
                external: true
                targetPort: 80
                transport: auto
              secrets: []
            template:
              containers:
                - name: frontend
                  image: "{{ frontend_docker_image }}"
                  resources:
                    cpu: "{{ frontend_container_cpu | float }}"
                    memory: "{{ frontend_container_memory }}"
                  env:
                    - name: VITE_API_URL
                      value: "https://{{ backend_app.response.properties.configuration.ingress.fqdn | default(backend_container_app_name ~ '.' ~ location ~ '.azurecontainerapps.io') }}"
              scale:
                minReplicas: "{{ frontend_min_replicas | int }}"
                maxReplicas: "{{ frontend_max_replicas | int }}"
                rules:
                  - name: http-scale
                    http:
                      metadata:
                        concurrentRequests: "75"
      register: frontend_app

    - name: Display deployment results
      debug:
        msg:
          - "=== Deployment Completed Successfully ==="
          - ""
          - "Backend Container App:"
          - "  Name: {{ backend_app.response.name }}"
          - "  FQDN: {{ backend_app.response.properties.configuration.ingress.fqdn }}"
          - ""
          - "Frontend Container App:"
          - "  Name: {{ frontend_app.response.name }}"
          - "  FQDN: {{ frontend_app.response.properties.configuration.ingress.fqdn }}"
          - ""
          - "MySQL Server:"
          - "  Host: {{ mysql_fqdn | default('Not deployed') }}"
          - "  Database: {{ mysql_database_name }}"
          - "  User: {{ mysql_admin_username }}"
          - ""
          - "Next steps:"
          - "1. Push your Docker images to Docker Hub o Azure Container Registry"
          - "2. Actualiza el frontend VITE_API_URL si el dominio cambia"
          - "3. Revisa m√©tricas y autoscaling en Azure Portal"
